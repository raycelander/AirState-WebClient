// @hash v2-7CC74A778157147B3D842C236196D2C1
// Automatically generated by ReactJS.NET. Do not edit, your changes will be overridden.
// Version: 1.5.4 (build 4f3b0f1)
// Generated at: 18.08.2015 14:59:58
///////////////////////////////////////////////////////////////////////////////
  var isValidPullDown = false;
  var pullDownStartPos = 0;
  var AirState = React.createClass({displayName: "AirState",
          render: function(){
          return (
            React.createElement("div", {className: "airstate container", onTouchEnd: this.onTouchEnd, onTouchStart: this.handleTouchStart, onTouchMove: this.handleTouchMove}, 
              React.createElement("div", {className: "row pulldown", ref: "pulldown"}), 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-md-1 header"}, 
                      React.createElement("img", {src: "svg/airstate_full.svg", height: "86"})
                 )
              ), 
              React.createElement("div", {className: "row"}, 
          			React.createElement(PointOfMeasureComponent, {station: "Aussen"})
              ), 
              React.createElement("div", {className: "row"}, 	
                React.createElement("div", {className: "col-md-12"}, 
                  React.createElement(HighchartsBar, {measurement: "temp"})
                )
              ), 
              React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-md-12"}, 
                  React.createElement(HighchartsBar, {measurement: "hum"})
                )
              ), 
               React.createElement("div", {className: "row"}, 
                React.createElement("div", {className: "col-md-12"}, 
                  React.createElement(HighchartsBar, {measurement: "hpa"})
                )
              )
            )
          );
        },
        handleTouchStart: function(event) {
            isValidPullDown = window.scrollY == 0;
            pullDownStartPos = event.touches[0].clientY;
        },
        handleTouchMove: function(event) {
          if (isValidPullDown){
            this.refs.pulldown.getDOMNode().style.height = event.touches[0].clientY - pullDownStartPos + "px";
            if (event.touches[0].clientY - pullDownStartPos > 40){
              this.refs.pulldown.getDOMNode().innerText = "release to refresh";
            }else{
              this.refs.pulldown.getDOMNode().innerText = "";
            }
          }
        },
        onTouchEnd: function(event) {
          this.refs.pulldown.getDOMNode().innerText = "";
          if (event.changedTouches[0].clientY - pullDownStartPos < 40){
            this.refs.pulldown.getDOMNode().style.height = "0px";
            isValidPullDown = false;
            return;
          }
          
          if (isValidPullDown){
            this.refs.pulldown.getDOMNode().style.height = "0px";
            React.render(React.createElement(AirState, null), document.getElementById('airstate'));
          }
        },
      });
React.initializeTouchEvents(true);
React.render(React.createElement(AirState, null), document.getElementById('airstate'));
